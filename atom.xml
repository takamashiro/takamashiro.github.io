<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>takamashiro的博客</title>
  <subtitle>try to write something to record my life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-06T02:56:12.714Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>takamashiro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReactiveCocoa入门教程（上）：第一部分</title>
    <link href="http://yoursite.com/2016/04/22/ReactiveCocoa%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B(%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86)/"/>
    <id>http://yoursite.com/2016/04/22/ReactiveCocoa入门教程(第一部分)/</id>
    <published>2016-04-22T05:51:37.000Z</published>
    <updated>2016-08-06T02:56:12.714Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个iOS开发者，你写的每一行代码几乎都是在相应某个事件，例如按钮的点击，收到网络消息，属性的变化（通过KVO）或者用户位置的变化（通过CoreLocation）。但是这些事件都用不同的方式来处理，比如action、delegate、KVO、callback等。ReactiveCocoa为事件定义了一个标准接口，从而可以使用一些基本工具来更容易的连接、过滤和组合。<br>如果你对上面说的还比较疑惑，那还是继续往下看吧。<br>ReactiveCocoa结合了几种编程风格：<br>函数式编程（Functional Programming）：使用高阶函数，例如函数用其他函数作为参数。<br>响应式编程（Reactive Programming）：关注于数据流和变化传播。<br>所以，你可能听说过ReactiveCocoa被描述为函数响应式编程（FRP）框架。<br>这就是这篇教程要讲的内容。编程范式是个不错的主题，但是本篇教程的其余部分将会通过一个例子来实践。<a id="more"></a> </p>
<h3 id="Reactive-Playground"><a href="#Reactive-Playground" class="headerlink" title="Reactive Playground"></a>Reactive Playground</h3><p>通过这篇教程，一个简单的范例应用Reactive Playground，你将会了解到响应式编程。下载初始工程，然后编译运行一下确保你已经把一切都设置正确了。<br>Reactive Playground是一个非常简单的应用，它为用户展示了一个登录页。在用户名框输入user，在密码框输入password，然后你就能看到有一只可爱小猫咪的欢迎页了。<br>01.jpg<br>呀，真是可爱啊。<br>现在可以花一些时间来看一下初始工程的代码。很简单，用不了多少时间。<br>打开RWViewController.m看一下。你多快能找到控制登录按钮是否可用的条件？判断显示/隐藏登录失败label的条件是什么？在这个相对简单的例子里，可能只用一两分钟就能回答这些问题。但是对于更复杂的例子，这些所花的时间可能就比较多了。<br>使用ReactiveCocoa，可以使应用的基本逻辑变得相当简洁。是时候开始啦。</p>
<h3 id="添加ReactiveCocoa框架"><a href="#添加ReactiveCocoa框架" class="headerlink" title="添加ReactiveCocoa框架"></a>添加ReactiveCocoa框架</h3><p>添加ReactiveCocoa框架最简单的方法就是用CocoaPods。如果你从没用过CocoaPods，那还是先去看看CocoaPods简介这篇教程吧。请至少看完教程中初始化的步骤，这样你才能安装框架。<br>注意：如果不想用CocoaPods，你仍然可以使用ReactiveCocoa，具体查看Github文档中引入ReactiveCocoa的步骤描述。<br>译注：我就是不喜欢用CocoaPods的那波人。所以我首先使用了Github上提供的方法，但是在第二步执行bootstrap时提示缺少xctool，我就果断放弃了，还是乖乖用CocoaPods吧。<br>具体怎么使用CocoaPods安装就不详细讲解了。<br>开始<br>就像在介绍中提到的，RAC为应用中发生的不同事件流提供了一个标准接口。在ReactiveCocoa术语中这个叫做信号（signal），由RACSignal类表示。<br>打开应用的初始view controller，RWViewController.m ，引入ReactiveCocoa的头文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#import</div><div class="line">不要替换已有的代码，将下面的代码添加到viewDidLoad方法的最后：</div><div class="line">[self.usernameTextField.rac_textSignal subscribeNext:^(id x)&#123;</div><div class="line">  NSLog(@&quot;%@&quot;, x);</div><div class="line">&#125;];</div><div class="line">``` </div><div class="line"> 编译运行，在用户名输入框中输几个字。注意console的输出应该和下面的类似。</div><div class="line">``` Objective-C</div><div class="line">2013-12-24 14:48:50.359 RWReactivePlayground[9193:a0b] i</div><div class="line">2013-12-24 14:48:50.436 RWReactivePlayground[9193:a0b] is</div><div class="line">2013-12-24 14:48:50.541 RWReactivePlayground[9193:a0b] is </div><div class="line">2013-12-24 14:48:50.695 RWReactivePlayground[9193:a0b] is t</div><div class="line">2013-12-24 14:48:50.831 RWReactivePlayground[9193:a0b] is th</div><div class="line">2013-12-24 14:48:50.878 RWReactivePlayground[9193:a0b] is thi</div><div class="line">2013-12-24 14:48:50.901 RWReactivePlayground[9193:a0b] is this</div><div class="line">2013-12-24 14:48:51.009 RWReactivePlayground[9193:a0b] is this </div><div class="line">2013-12-24 14:48:51.142 RWReactivePlayground[9193:a0b] is this m</div><div class="line">2013-12-24 14:48:51.236 RWReactivePlayground[9193:a0b] is this ma</div><div class="line">2013-12-24 14:48:51.335 RWReactivePlayground[9193:a0b] is this mag</div><div class="line">2013-12-24 14:48:51.439 RWReactivePlayground[9193:a0b] is this magi</div><div class="line">2013-12-24 14:48:51.535 RWReactivePlayground[9193:a0b] is this magic</div><div class="line">2013-12-24 14:48:51.774 RWReactivePlayground[9193:a0b] is this magic?</div></pre></td></tr></table></figure></p>
<p>可以看到每次改变文本框中的文字，block中的代码都会执行。没有target-action，没有delegate，只有signal和block。令人激动不是吗？<br>ReactiveCocoa signal（RACSignal）发送事件流给它的subscriber。目前总共有三种类型的事件：next、error、completed。一个signal在因error终止或者完成前，可以发送任意数量的next事件。在本教程的第一部分，我们将会关注next事件。在第二部分，将会学习error和completed事件。<br>RACSignal有很多方法可以来订阅不同的事件类型。每个方法都需要至少一个block，当事件发生时就会执行block中的逻辑。在上面的例子中可以看到每次next事件发生时，subscribeNext:方法提供的block都会执行。<br>ReactiveCocoa框架使用category来为很多基本UIKit控件添加signal。这样你就能给控件添加订阅了，text field的rac_textSignal就是这么来的。<br>原理就说这么多，是时候开始让ReactiveCocoa干活了。<br>ReactiveCocoa有很多操作来控制事件流。假设你只关心超过3个字符长度的用户名，那么你可以使用filter操作来实现这个目的。把之前加在viewDidLoad中的代码更新成下面的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[[self.usernameTextField.rac_textSignal</div><div class="line">filter:^BOOL(id value)&#123;</div><div class="line">   NSString*text = value;</div><div class="line">   return text.length &gt; 3;</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(id x)&#123;</div><div class="line">   NSLog(@&quot;%@&quot;, x);</div><div class="line">  &#125;];</div><div class="line">``` </div><div class="line">编译运行，在text field只能怪输入几个字，你会发现只有当输入超过3个字符时才会有log。</div><div class="line">``` Objective-C</div><div class="line">2013-12-26 08:17:51.335 RWReactivePlayground[9654:a0b] is t</div><div class="line">2013-12-26 08:17:51.478 RWReactivePlayground[9654:a0b] is th</div><div class="line">2013-12-26 08:17:51.526 RWReactivePlayground[9654:a0b] is thi</div><div class="line">2013-12-26 08:17:51.548 RWReactivePlayground[9654:a0b] is this</div><div class="line">2013-12-26 08:17:51.676 RWReactivePlayground[9654:a0b] is this </div><div class="line">2013-12-26 08:17:51.798 RWReactivePlayground[9654:a0b] is this m</div><div class="line">2013-12-26 08:17:51.926 RWReactivePlayground[9654:a0b] is this ma</div><div class="line">2013-12-26 08:17:51.987 RWReactivePlayground[9654:a0b] is this mag</div><div class="line">2013-12-26 08:17:52.141 RWReactivePlayground[9654:a0b] is this magi</div><div class="line">2013-12-26 08:17:52.229 RWReactivePlayground[9654:a0b] is this magic</div><div class="line">2013-12-26 08:17:52.486 RWReactivePlayground[9654:a0b] is this magic?</div></pre></td></tr></table></figure></p>
<p>刚才所创建的只是一个很简单的管道。这就是响应式编程的本质，根据数据流来表达应用的功能。<br>用图形来表达就是下面这样的：<br>FilterPipeline.png<br>从上面的图中可以看到，rac_textSignal是起始事件。然后数据通过一个filter，如果这个事件包含一个长度超过3的字符串，那么该事件就可以通过。管道的最后一步就是subscribeNext:，block在这里打印出事件的值。<br>filter操作的输出也是RACSignal，这点先放到一边。你可以像下面那样调整一下代码来展示每一步的操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">RACSignal *usernameSourceSignal =</div><div class="line">    self.usernameTextField.rac_textSignal;</div><div class="line">  </div><div class="line">RACSignal *filteredUsername =[usernameSourceSignal</div><div class="line">  filter:^BOOL(id value)&#123;</div><div class="line">    NSString*text = value;</div><div class="line">    return text.length &gt; 3;</div><div class="line">  &#125;];</div><div class="line">  </div><div class="line">[filteredUsername subscribeNext:^(id x)&#123;</div><div class="line">  NSLog(@&quot;%@&quot;, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>RACSignal的每个操作都会返回一个RACsignal，这在术语上叫做连贯接口（fluent interface）。这个功能可以让你直接构建管道，而不用每一步都使用本地变量。<br>注意：ReactiveCocoa大量使用block。如果你是block新手，你可能想看看Apple官方的block编程指南。如果你熟悉block，但是觉得block的语法有些奇怪和难记，你可能会想看看这个有趣又实用的网页f<strong>*</strong>gblocksyntax.com。<br>类型转换<br>如果你之前把代码分成了多个步骤，现在再把它改回来吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[[self.usernameTextField.rac_textSignal</div><div class="line">  filter:^BOOL(id value)&#123;</div><div class="line">    NSString*text = value; // implicit cast</div><div class="line">    return text.length &gt; 3;</div><div class="line">  &#125;]</div><div class="line">  subscribeNext:^(id x)&#123;</div><div class="line">    NSLog(@&quot;%@&quot;, x);</div><div class="line">  &#125;];</div></pre></td></tr></table></figure></p>
<p>在上面的代码中，注释部分标记了将id隐式转换为NSString，这看起来不是很好看。幸运的是，传入block的值肯定是个NSString，所以你可以直接修改参数类型，把代码更新成下面的这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[self.usernameTextField.rac_textSignal</div><div class="line">  filter:^BOOL(NSString*text)&#123;</div><div class="line">    return text.length &gt; 3;</div><div class="line">  &#125;]</div><div class="line">  subscribeNext:^(id x)&#123;</div><div class="line">    NSLog(@&quot;%@&quot;, x);</div><div class="line">  &#125;];</div></pre></td></tr></table></figure></p>
<p>编译运行，确保没什么问题。<br>什么是事件呢？<br>到目前为止，本篇教程已经描述了不同的事件类型，但是还没有说明这些事件的结构。有意思的是（？），事件可以包括任何事情。<br>下面来展示一下，在管道中添加另一个操作。把添加在viewDidLoad中的代码更新成下面的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[[[self.usernameTextField.rac_textSignal</div><div class="line">  map:^id(NSString*text)&#123;</div><div class="line">    return @(text.length);</div><div class="line">  &#125;]</div><div class="line">  filter:^BOOL(NSNumber*length)&#123;</div><div class="line">    return[length integerValue] &gt; 3;</div><div class="line">  &#125;]</div><div class="line">  subscribeNext:^(id x)&#123;</div><div class="line">    NSLog(@&quot;%@&quot;, x);</div><div class="line">  &#125;];</div></pre></td></tr></table></figure></p>
<p>编译运行，你会发现log输出变成了文本的长度而不是内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">2013-12-26 12:06:54.566 RWReactivePlayground[10079:a0b] 4</div><div class="line">2013-12-26 12:06:54.725 RWReactivePlayground[10079:a0b] 5</div><div class="line">2013-12-26 12:06:54.853 RWReactivePlayground[10079:a0b] 6</div><div class="line">2013-12-26 12:06:55.061 RWReactivePlayground[10079:a0b] 7</div><div class="line">2013-12-26 12:06:55.197 RWReactivePlayground[10079:a0b] 8</div><div class="line">2013-12-26 12:06:55.300 RWReactivePlayground[10079:a0b] 9</div><div class="line">2013-12-26 12:06:55.462 RWReactivePlayground[10079:a0b] 10</div><div class="line">2013-12-26 12:06:55.558 RWReactivePlayground[10079:a0b] 11</div><div class="line">2013-12-26 12:06:55.646 RWReactivePlayground[10079:a0b] 12</div></pre></td></tr></table></figure></p>
<p>新加的map操作通过block改变了事件的数据。map从上一个next事件接收数据，通过执行block把返回值传给下一个next事件。在上面的代码中，map以NSString为输入，取字符串的长度，返回一个NSNumber。<br>来看下面的图片：<br>FilterAndMapPipeline.png<br>能看到map操作之后的步骤收到的都是NSNumber实例。你可以使用map操作来把接收的数据转换成想要的类型，只要它是个对象。<br>注意：在上面的例子中text.length返回一个NSUInteger，是一个基本类型。为了将它作为事件的内容，NSUInteger必须被封装。幸运的是Objective-C literal syntax提供了一种简单的方法来封装——@ (text.length)。<br>现在差不多是时候用所学的内容来更新一下ReactivePlayground应用了。你可以把之前的添加代码都删除了。<br>创建有效状态信号<br>首先要做的就是创建一些信号，来表示用户名和密码输入框中的输入内容是否有效。把下面的代码添加到RWViewController.m中viewDidLoad的最后面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">RACSignal *validUsernameSignal =</div><div class="line"> [self.usernameTextField.rac_textSignal</div><div class="line"> map:^id(NSString *text) &#123;</div><div class="line"> return @([self isValidUsername:text]);</div><div class="line"> &#125;]; </div><div class="line">RACSignal *validPasswordSignal =</div><div class="line"> [self.passwordTextField.rac_textSignal </div><div class="line"> map:^id(NSString *text) &#123; </div><div class="line"> return @([self isValidPassword:text]);</div><div class="line"> &#125;];</div></pre></td></tr></table></figure></p>
<p>可以看到，上面的代码对每个输入框的rac_textSignal应用了一个map转换。输出是一个用NSNumber封装的布尔值。<br>下一步是转换这些信号，从而能为输入框设置不同的背景颜色。基本上就是，你订阅这些信号，然后用接收到的值来更新输入框的背景颜色。下面有一种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[validPasswordSignal</div><div class="line">  map:^id(NSNumber *passwordValid)&#123;</div><div class="line">    return[passwordValid boolValue] ? [UIColor clearColor]:[UIColor yellowColor];</div><div class="line">  &#125;]</div><div class="line">  subscribeNext:^(UIColor *color)&#123;</div><div class="line">    self.passwordTextField.backgroundColor = color;</div><div class="line">  &#125;];</div></pre></td></tr></table></figure></p>
<p>（不要使用这段代码，下面有一种更好的写法！）<br>从概念上来说，就是把之前信号的输出应用到输入框的backgroundColor属性上。但是上面的用法不是很好。<br>幸运的是，ReactiveCocoa提供了一个宏来更好的完成上面的事情。把下面的代码直接加到viewDidLoad中两个信号的代码后面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">RAC(self.passwordTextField, backgroundColor) =</div><div class="line">  [validPasswordSignal</div><div class="line">    map:^id(NSNumber *passwordValid)&#123;</div><div class="line">      return[passwordValid boolValue] ? [UIColor clearColor]:[UIColor yellowColor];</div><div class="line">    &#125;];</div><div class="line">  </div><div class="line">RAC(self.usernameTextField, backgroundColor) =</div><div class="line">  [validUsernameSignal</div><div class="line">    map:^id(NSNumber *passwordValid)&#123;</div><div class="line">     return[passwordValid boolValue] ? [UIColor clearColor]:[UIColor yellowColor];</div><div class="line">   &#125;];</div></pre></td></tr></table></figure></p>
<p>RAC宏允许直接把信号的输出应用到对象的属性上。RAC宏有两个参数，第一个是需要设置属性值的对象，第二个是属性名。每次信号产生一个next事件，传递过来的值都会应用到该属性上。<br>你不觉得这种方法很好吗？<br>在编译运行之前，找到updateUIState方法，把头两行删掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">self.usernameTextField.backgroundColor = </div><div class="line">    self.usernameIsValid ? [UIColor clearColor] : [UIColor yellowColor]; </div><div class="line">self.passwordTextField.backgroundColor = </div><div class="line">    self.passwordIsValid ? [UIColor clearColor] : [UIColor yellowColor];</div></pre></td></tr></table></figure></p>
<p>这样就把不相关的代码删掉了。<br>编译运行，可以发现当输入内容无效时，输入框看起来高亮了，有效时又透明了。<br>现在的逻辑用图形来表示就是下面这样的。能看到有两条简单的管道，两个文本信号，经过一个map转为表示是否有效的布尔值，再经过一个map转为UIColor，而这个UIColor已经和输入框的背景颜色绑定了。<br>TextFieldValidPipeline.png<br>你是否好奇为什么要创建两个分开的validPasswordSignal和validUsernameSignal呢，而不是每个输入框一个单独的管道呢？（？）稍安勿躁，答案就在下面。<br>原文：Are you wondering why you created separate validPasswordSignal and validUsernameSignal signals, as opposed to a single fluent pipeline for each text field? Patience dear reader, the method behind this madness will become clear shortly!<br>聚合信号<br>目前在应用中，登录按钮只有当用户名和密码输入框的输入都有效时才工作。现在要把这里改成响应式的。<br>现在的代码中已经有可以产生用户名和密码输入框是否有效的信号了——validUsernameSignal和validPasswordSignal了。现在需要做的就是聚合这两个信号来决定登录按钮是否可用。<br>把下面的代码添加到viewDidLoad的末尾：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RACSignal *signUpActiveSignal =</div><div class="line">  [RACSignal combineLatest:@[validUsernameSignal, validPasswordSignal]</div><div class="line">                    reduce:^id(NSNumber*usernameValid, NSNumber *passwordValid)&#123;</div><div class="line">                      return @([usernameValid boolValue]&amp;&amp;[passwordValid boolValue]);</div><div class="line">                    &#125;];</div></pre></td></tr></table></figure></p>
<p>上面的代码使用combineLatest:reduce:方法把validUsernameSignal和validPasswordSignal产生的最新的值聚合在一起，并生成一个新的信号。每次这两个源信号的任何一个产生新值时，reduce block都会执行，block的返回值会发给下一个信号。<br>注意：RACsignal的这个方法可以聚合任意数量的信号，reduce block的参数和每个源信号相关。ReactiveCocoa有一个工具类RACBlockTrampoline，它在内部处理reduce block的可变参数。实际上在ReactiveCocoa的实现中有很多隐藏的技巧，值得你去看看。<br>现在已经有了合适的信号，把下面的代码添加到viewDidLoad的末尾。这会把信号和按钮的enabled属性绑定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[signUpActiveSignal subscribeNext:^(NSNumber*signupActive)&#123;</div><div class="line">   self.signInButton.enabled =[signupActive boolValue];</div><div class="line"> &#125;];</div></pre></td></tr></table></figure></p>
<p>在运行之前，把以前的旧实现删掉。把下面这两个属性删掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic) BOOL passwordIsValid;</div><div class="line">@property (nonatomic) BOOL usernameIsValid;</div></pre></td></tr></table></figure></p>
<p>把viewDidLoad中的这些也删掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// handle text changes for both text fields</div><div class="line">[self.usernameTextField addTarget:self</div><div class="line">                           action:@selector(usernameTextFieldChanged)</div><div class="line">                 forControlEvents:UIControlEventEditingChanged];</div><div class="line">[self.passwordTextField addTarget:self</div><div class="line">                           action:@selector(passwordTextFieldChanged)</div><div class="line">                forControlEvents:UIControlEventEditingChanged];</div></pre></td></tr></table></figure></p>
<p>同样把updateUIState、usernameTextFieldChanged和passwordTextFieldChanged方法删掉。<br>最后确保把viewDidLoad中updateUIState的调用删掉。<br>编译运行，看看登录按钮。当用户名和密码输入有效时，按钮就是可用的，和以前一样。<br>现在应用的逻辑就是下面这样的：<br>CombinePipeline.png<br>上图展示了一些重要的概念，你可以使用ReactiveCocoa来完成一些重量级的任务。<br>分割——信号可以有很多subscriber，也就是作为很多后续步骤的源。注意上图中那个用来表示用户名和密码有效性的布尔信号，它被分割成多个，用于不同的地方。<br>聚合——多个信号可以聚合成一个新的信号，在上面的例子中，两个布尔信号聚合成了一个。实际上你可以聚合并产生任何类型的信号。<br>这些改动的结果就是，代码中没有用来表示两个输入框有效状态的私有属性了。这就是用响应式编程的一个关键区别，你不需要使用实例变量来追踪瞬时状态。<br>响应式的登录<br>应用目前使用上面图中展示的响应式管道来管理输入框和按钮的状态。但是按钮按下的处理用的还是action，所以下一步就是把剩下的逻辑都替换成响应式的。<br>在storyboard中，登录按钮的Touch Up Inside事件和RWViewController.m中的signInButtonTouched方法是绑定的。下面会用响应的方法替换，所以首先要做的就是断开当前的storyboard action。<br>打开Main.storyboard，找到登录按钮，按住ctrl键单击，打开outlet/action连接框，然后点击x来断开连接。如果你找不到的话，下图中红色箭头指示的就是删除按钮。<br>DisconnectAction.jpg<br>你已经知道了ReactiveCocoa框架是如何给基本UIKit控件添加属性和方法的了。目前你已经使用了rac_textSignal，它会在文本发生变化时产生信号。为了处理按钮的事件，现在需要用到ReactiveCocoa为UIKit添加的另一个方法，rac_signalForControlEvents。<br>现在回到RWViewController.m，把下面的代码添加到viewDidLoad的末尾：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[[self.signInButton</div><div class="line">   rac_signalForControlEvents:UIControlEventTouchUpInside]</div><div class="line">   subscribeNext:^(id x) &#123;</div><div class="line">     NSLog(@&quot;button clicked&quot;);</div><div class="line">   &#125;];</div><div class="line">``` Objective-C</div><div class="line">上面的代码从按钮的UIControlEventTouchUpInside事件创建了一个信号，然后添加了一个订阅，在每次事件发生时都会输出log。</div><div class="line">编译运行，确保的确有log输出。按钮只在用户名和密码框输入有效时可用，所以在点击按钮前需要在两个文本框中输入一些内容。</div><div class="line">可以看到Xcode控制台的输出和下面的类似：</div><div class="line">``` Objective-C</div><div class="line">2013-12-28 08:05:10.816 RWReactivePlayground[18203:a0b] button clicked</div><div class="line">2013-12-28 08:05:11.675 RWReactivePlayground[18203:a0b] button clicked</div><div class="line">2013-12-28 08:05:12.605 RWReactivePlayground[18203:a0b] button clicked</div><div class="line">2013-12-28 08:05:12.766 RWReactivePlayground[18203:a0b] button clicked</div><div class="line">2013-12-28 08:05:12.917 RWReactivePlayground[18203:a0b] button clicked</div></pre></td></tr></table></figure></p>
<p>现在按钮有了点击事件的信号，下一步就是把它和登录流程连接起来。那么问题就来了，打开RWDummySignInService.h，看一下接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">typedef void (^RWSignInResponse)(BOOL);</div><div class="line">  </div><div class="line">@interface RWDummySignInService : NSObject</div><div class="line">  </div><div class="line">- (void)signInWithUsername:(NSString *)username</div><div class="line">                  password:(NSString *)password</div><div class="line">                  complete:(RWSignInResponse)completeBlock;</div><div class="line">                   </div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>这个service有3个参数，用户名、密码和一个完成回调block。这个block会在登录成功或失败时执行。你可以在按钮点击事件的subscribeNext: blcok里直接调用这个方法，但是为什么你要这么做？（？）<br>注意：本教程为了简便使用了一个假的service，所以它不依赖任何外部API。但你现在的确遇到了一个问题，如何使用这些不是用信号表示的API呢？<br>创建信号<br>幸运的是，把已有的异步API用信号的方式来表示相当简单。首先把RWViewController.m中的signInButtonTouched:删掉。你会用响应式的的方法来替换这段逻辑。<br>还是在RWViewController.m中，添加下面的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (RACSignal *)signInSignal &#123;</div><div class="line">return [RACSignal createSignal:^RACDisposable *(id subscriber)&#123;</div><div class="line">   [self.signInService </div><div class="line">     signInWithUsername:self.usernameTextField.text</div><div class="line">               password:self.passwordTextField.text</div><div class="line">               complete:^(BOOL success)&#123;</div><div class="line">                    [subscriber sendNext:@(success)];</div><div class="line">                    [subscriber sendCompleted];</div><div class="line">     &#125;];</div><div class="line">   return nil;</div><div class="line">&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的方法创建了一个信号，使用用户名和密码登录。现在分解来看一下。<br>上面的代码使用RACSignal的createSignal:方法来创建信号。方法的入参是一个block，这个block描述了这个信号。当这个信号有subscriber时，block里的代码就会执行。<br>block的入参是一个subscriber实例，它遵循RACSubscriber协议，协议里有一些方法来产生事件，你可以发送任意数量的next事件，或者用error\complete事件来终止。本例中，信号发送了一个next事件来表示登录是否成功，随后是一个complete事件。<br>这个block的返回值是一个RACDisposable对象，它允许你在一个订阅被取消时执行一些清理工作。当前的信号不需要执行清理操作，所以返回nil就可以了。<br>可以看到，把一个异步API用信号封装是多简单！<br>现在就来使用这个新的信号。把之前添加在viewDidLoad中的代码更新成下面这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[[[self.signInButton</div><div class="line">   rac_signalForControlEvents:UIControlEventTouchUpInside]</div><div class="line">   map:^id(id x)&#123;</div><div class="line">     return[self signInSignal];</div><div class="line">   &#125;]</div><div class="line">   subscribeNext:^(id x)&#123;</div><div class="line">     NSLog(@&quot;Sign in result: %@&quot;, x);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure></p>
<p>上面的代码使用map方法，把按钮点击信号转换成了登录信号。subscriber输出log。<br>编译运行，点击登录按钮，查看Xcode的控制台，等等，输出的这是个什么鬼？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2014-01-08 21:00:25.919 RWReactivePlayground[33818:a0b] Sign in result:</div><div class="line">                                    name: +createSignal:</div></pre></td></tr></table></figure></p>
<p>没错，你已经给subscribeNext:的block传入了一个信号，但传入的不是登录结果的信号。<br>下图展示了到底发生了什么：<br>02.png<br>当点击按钮时，rac_signalForControlEvents发送了一个next事件（事件的data是UIButton）。map操作创建并返回了登录信号，这意味着后续步骤都会收到一个RACSignal。这就是你在subscribeNext:这步看到的。<br>上面问题的解决方法，有时候叫做信号中的信号，换句话说就是一个外部信号里面还有一个内部信号。你可以在外部信号的subscribeNext:block里订阅内部信号。不过这样嵌套太混乱啦，还好ReactiveCocoa已经解决了这个问题。<br>信号中的信号<br>解决的方法很简单，只需要把map操作改成flattenMap就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[[[self.signInButton</div><div class="line">   rac_signalForControlEvents:UIControlEventTouchUpInside]</div><div class="line">   flattenMap:^id(id x)&#123;</div><div class="line">     return[self signInSignal];</div><div class="line">   &#125;]</div><div class="line">   subscribeNext:^(id x)&#123;</div><div class="line">     NSLog(@&quot;Sign in result: %@&quot;, x);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure></p>
<p>这个操作把按钮点击事件转换为登录信号，同时还从内部信号发送事件到外部信号。<br>编译运行，注意控制台，现在应该输出登录是否成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2013-12-28 18:20:08.156 RWReactivePlayground[22993:a0b] Sign in result: 0</div><div class="line">2013-12-28 18:25:50.927 RWReactivePlayground[22993:a0b] Sign in result: 1</div></pre></td></tr></table></figure></p>
<p>还不错。<br>现在已经完成了大部分的内容，最后就是在subscribeNext步骤里添加登录成功后跳转的逻辑。把代码更新成下面的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[[[self.signInButton</div><div class="line">rac_signalForControlEvents:UIControlEventTouchUpInside]</div><div class="line">flattenMap:^id(id x)&#123;</div><div class="line">   return[self signInSignal];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(NSNumber*signedIn)&#123;</div><div class="line">   BOOL success =[signedIn boolValue];</div><div class="line">   self.signInFailureText.hidden = success;</div><div class="line">   if(success)&#123;</div><div class="line">     [self performSegueWithIdentifier:@&quot;signInSuccess&quot; sender:self];</div><div class="line">   &#125;</div><div class="line">  &#125;];</div></pre></td></tr></table></figure></p>
<p>subscribeNext: block从登录信号中取得结果，相应地更新signInFailureText是否可见。如果登录成功执行导航跳转。<br>编译运行，应该就能再看到可爱的小猫啦！喵~<br>03.jpg<br>你注意到这个应用现在有一些用户体验上的小问题了吗？当登录service正在校验用户名和密码时，登录按钮应该是不可点击的。这会防止用户多次执行登录操作。还有，如果登录失败了，用户再次尝试登录时，应该隐藏错误信息。<br>这个逻辑应该怎么添加呢？改变按钮的可用状态并不是转换（map）、过滤（filter）或者其他已经学过的概念。其实这个就叫做“副作用”，换句话说就是在一个next事件发生时执行的逻辑，而该逻辑并不改变事件本身。<br>添加附加操作（Adding side-effects）<br>把代码更新成下面的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[[[[self.signInButton</div><div class="line">   rac_signalForControlEvents:UIControlEventTouchUpInside]</div><div class="line">   doNext:^(id x)&#123;</div><div class="line">     self.signInButton.enabled =NO;</div><div class="line">     self.signInFailureText.hidden =YES;</div><div class="line">   &#125;]</div><div class="line">   flattenMap:^id(id x)&#123;</div><div class="line">     return[self signInSignal];</div><div class="line">   &#125;]</div><div class="line">   subscribeNext:^(NSNumber*signedIn)&#123;</div><div class="line">     self.signInButton.enabled =YES;</div><div class="line">     BOOL success =[signedIn boolValue];</div><div class="line">     self.signInFailureText.hidden = success;</div><div class="line">     if(success)&#123;</div><div class="line">       [self performSegueWithIdentifier:@&quot;signInSuccess&quot; sender:self];</div><div class="line">     &#125;</div><div class="line">   &#125;];</div></pre></td></tr></table></figure></p>
<p>你可以看到doNext:是直接跟在按钮点击事件的后面。而且doNext: block并没有返回值。因为它是附加操作，并不改变事件本身。<br>上面的doNext: block把按钮置为不可点击，隐藏登录失败提示。然后在subscribeNext: block里重新把按钮置为可点击，并根据登录结果来决定是否显示失败提示。<br>之前的管道图就更新成下面这样的：<br>04.png<br>编译运行，确保登录按钮的可点击状态和预期的一样。<br>现在所有的工作都已经完成了，这个应用已经是响应式的啦。<br>如果你中途哪里出了问题，可以下载最终的工程（依赖库都有），或者在Github上找到这份代码，教程中的每一次编译运行都有对应的commit。<br>注意：在异步操作执行的过程中禁用按钮是一个常见的问题，ReactiveCocoa也能很好的解决。RACCommand就包含这个概念，它有一个enabled信号，能让你把按钮的enabled属性和信号绑定起来。你也许想试试这个类。<br>总结<br>希望本教程为你今后在自己的应用中使用ReactiveCocoa打下了一个好的基础。你可能需要一些练习来熟悉这些概念，但就像是语言或者编程，一旦你夯实基础，用起来也就很简单了。ReactiveCocoa的核心就是信号，而它不过就是事件流。还能再更简单点吗？<br>在使用ReactiveCocoa后，我发现了一个有趣的事情，那就是你可以用很多种不同的方法来解决同一个问题。你可以用教程中的例子试试，调整一下信号，改改信号的分割和聚合。<br>ReactiveCocoa的主旨是让你的代码更简洁易懂，这值得多想想。我个人认为，如果逻辑可以用清晰的管道、流式语法来表示，那就很好理解这个应用到底干了什么了<br>在本系列教程的第二部分，你将会学到诸如错误处理、在不同线程中执行代码等高级用法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个iOS开发者，你写的每一行代码几乎都是在相应某个事件，例如按钮的点击，收到网络消息，属性的变化（通过KVO）或者用户位置的变化（通过CoreLocation）。但是这些事件都用不同的方式来处理，比如action、delegate、KVO、callback等。ReactiveCocoa为事件定义了一个标准接口，从而可以使用一些基本工具来更容易的连接、过滤和组合。&lt;br&gt;如果你对上面说的还比较疑惑，那还是继续往下看吧。&lt;br&gt;ReactiveCocoa结合了几种编程风格：&lt;br&gt;函数式编程（Functional Programming）：使用高阶函数，例如函数用其他函数作为参数。&lt;br&gt;响应式编程（Reactive Programming）：关注于数据流和变化传播。&lt;br&gt;所以，你可能听说过ReactiveCocoa被描述为函数响应式编程（FRP）框架。&lt;br&gt;这就是这篇教程要讲的内容。编程范式是个不错的主题，但是本篇教程的其余部分将会通过一个例子来实践。
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="ReactiveCocoa" scheme="http://yoursite.com/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>（转）知乎上的48条神回复，针针见血，看完整个人通透多了</title>
    <link href="http://yoursite.com/2016/04/10/%E7%9F%A5%E4%B9%8E%E7%A5%9E%E5%9B%9E%E5%A4%8D/"/>
    <id>http://yoursite.com/2016/04/10/知乎神回复/</id>
    <published>2016-04-10T04:46:21.000Z</published>
    <updated>2016-08-06T01:00:27.326Z</updated>
    
    <content type="html"><![CDATA[<p>1、交朋友的标准是什么？<br>答：出世的智者，入世的强者，或者正常而阳光的普通人。<br>2、男性更看重女性的身材、脸蛋，还是思想？<br>　　答：脸蛋和身材决定了我是否想去了解她的思想，思想决定了我是否会一票否决掉她的脸蛋和身材。<br>3、“别让孩子输在起跑线上”有道理吗？<a id="more"></a><br>　　答：一辈子都要和别人去比较，是人生悲剧的源头。<br>4、做哪些事情可以提升生活品质？<br>　　答：定期扔东西。<br>5、结婚以后两个人在一起最重要的是什么？<br>　　答：就当这婚还没结。<br>6、怎么反驳“你行你上啊”的逻辑？<br>　　答：“我评论个电冰箱，自己还得会制冷啊？”<br>7、把学费拿来念书还是环游世界更合适？为什么？<br>　　答：读书在没有充分的知识作为前提的情况下，即使行了万里路也不过是邮差而已。<br>8、为什么部分人会产生“聪明智慧的姑娘都被憨憨的小伙儿搞定了”的印象？<br>　　答：严肃地说，我觉得，要么姑娘只是看起来聪明，要么小伙儿只是看起来憨……<br>9、你心中的完美爱情是怎么样的？<br>　　答：可以有不完美。<br>10、异国长期生活，改变了你的哪些“是非观”？<br>　　答：很多事情只是不同，并无是非。<br>11、是不是一个人越成熟就越难爱上一个人？<br>　　答：不是越成熟越难爱上一个人。是越成熟，越能分辨那是不是爱。<br>12、如何让这个世界变得美好？<br>　　答：把你自己变得更美好。<br>13、苦难有什么价值？<br>　　答：永远不要相信苦难是值得的，苦难就是苦难，苦难不会带来成功。苦难不值得追求，磨练意志是因为苦难无法躲开。<br>14、如何反驳“现实点，这个社会就是这样”？<br>　　答：“你是怎样，你的世界就是怎样。”<br>15、你对自由的理解是什么？<br>　　答：说“不”的能力。<br>16、怎么看待励志的书籍？<br>　　答：看再多，那都是别人的人生。<br>知乎上的48条神回复，针针见血，看完整个人通透多了<br>17、同样是别人比自己强，为什么有时会产生嫉妒心理，而有时会产生崇拜？<br>　　答：远的崇拜，近的嫉妒；够不着的崇拜，够得着的嫉妒；有利益冲突的嫉妒，没利益冲突的崇拜。<br>18、为什么当看到好照片时人们通常的反应是“真不错，你用的是什么相机”，当看到烂照片时，则往往笑话拍摄者水平很臭？<br>　　答：人习惯性地将自己的成功归因于自身，失败归因于环境；而将他人的成功归因于环境，失败归因于其自身。<br>19、怎样在有效提出推荐或建议的同时，避免给人灌输和强迫的感觉？<br>　　答：说服他人不要诉诸理性，应求于利益。<br>20、哪些技能，经较短时间的学习，就可以给人的生活带来巨大帮助？<br>　　答：夸奖他人。<br>21、你是如何走出人生的阴霾的？<br>　　答：多走几步。<br>22、二十六岁，工作三年却将留学三年，值得吗？<br>　　答：普通玩家选择标准配置，高端玩家选择自定义配置。<br>23、如何看待“年轻时就释怀与淡泊，是没有希望的”这句话？<br>　　答：试图用一句话就来总结复杂的人生，是没有希望的。<br>24、要怎样努力，才能成为很厉害的人？<br>　　答：如果你注定要成为厉害的人，那问题的答案就深藏在你的血脉里；如果你注定不是厉害的人，那你便只需要做好你自己。<br>25、前半生与后半生的分界线是在哪里？<br>　　答：此时此刻。<br>26、你遇到过哪些让你眼前一亮、醍醐灌顶或对你改变很大的理念？<br>　　答：天赋决定了你能达到的上限，努力程度决定了你能达到的下限。以绝大多数人的努力程度之低，远远没有达到要去拼天赋的地步。<br>27、人这一生为什么要努力？<br>　　答：最痛苦的事，不是失败，是我本可以。<br>28、在一个足够小的星球上行走，我们是在上坡还是下坡？<br>　　答：你感觉累就是上坡，感觉轻松就是下坡。<br>29、听过最落寞的一句话或诗句是什么？<br>　　答：不如意事常八九，可与言者无二三。<br>30、世界上有那么多好书好电影好动漫注定看不完，我们对这个事实该持何种态度？<br>　　答：怕什么真理无穷，进一寸有一寸的欢喜。——胡适<br>31、三十岁才开始学习编程靠谱吗？<br>　　答：种一棵树最好的时间是十年前，其次是现在。<br>32、向喜欢的女生表白被拒绝了，还是喜欢她，怎么办？<br>　　答：也许你弄错了什么是表白，表白应该是最终胜利时的号角，而不应该是发起进攻的冲锋号。<br>33、省钱的好办法有哪些？<br>　　答：在买任何东西之前牢记九字箴言：你喜欢，你需要，你适合。PS：适用于很多事，包括感情也一样。<br>34、王阳明的“知行合一”到底如何理解？又怎样运用到实际生活中？<br>　　答：知道做不到，等于不知道。<br>35、什么叫见过大世面？<br>　　答：能享受最好的，能承受最坏的。<br>36、科学和迷信的分界点是哪里？<br>　　答：我错了。<br>37、扎克伯格初期是怎么保护 Facebook 的最初创意？为什么Facebook 上线后没被其他大公司抄走？<br>　　答：保护创意的最好方法，就是将其最好地执行。<br>38、员工辞职最主要的原因是什么？<br>　　答：钱少事多离家远，位低权轻责任重。<br>39、你在生活中得到过的最好的建议是什么？<br>　　答：“过度自我关注是万恶之源”、“永远不要为尚未发生的事儿拧巴”、“觉得为时已晚的时候，恰恰是最早的时候”。<br>40、哪些行为是浪费时间？<br>　　答：思而不学+犹豫不决。<br>41、最能燃起你学习激情的一句话是什么？<br>　　答：你不能把这个世界，让给你所鄙视的人。<br>42、如果好人没好报，我们为什么还要做好人？<br>　　答：我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的。——哈维尔<br>43、恋爱半年，女朋友觉得没有了开始时的新鲜感，怎么办？<br>　　答：所谓新鲜感，不是和未知的人一起去做同样的事情，而是和已知的人一起去体验未知的人生。<br>44、为什么大家都要上大学找工作，而不太喜欢开出租车、开小店、开饭馆、摆街边早餐小吃摊等“短平快”项目？<br>　　答：“孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是因为，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严，给你快乐。”——龙应台<br>45、情商不高的例子有哪些？<br>　　答：对陌生人毕恭毕敬，对亲近的人随意发怒……<br>46、如何看待“年轻的时候需要的是朋友而不是人脉”？<br>　　答：没有目的之交往，才能感动人。<br>47、有哪些道理是你读了不信，听不进去，直到你亲身经历方笃信不疑的？<br>　　答：不要低估你的能力，不要高估你的毅力。<br>48、有哪些我们熟知的名言其实还有后半句？<br>　　答：“人是生而自由的”，下一句是：“但无往不在枷锁之中”，再下一句是：“自以为是其他一切主人的人，反而比其他一切更是奴隶。”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、交朋友的标准是什么？&lt;br&gt;答：出世的智者，入世的强者，或者正常而阳光的普通人。&lt;br&gt;2、男性更看重女性的身材、脸蛋，还是思想？&lt;br&gt;　　答：脸蛋和身材决定了我是否想去了解她的思想，思想决定了我是否会一票否决掉她的脸蛋和身材。&lt;br&gt;3、“别让孩子输在起跑线上”有道理吗？
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="知乎" scheme="http://yoursite.com/tags/%E7%9F%A5%E4%B9%8E/"/>
    
  </entry>
  
  <entry>
    <title>替换服务器获取的JSON数据中的换行符</title>
    <link href="http://yoursite.com/2015/09/24/%E6%9B%BF%E6%8D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8E%B7%E5%8F%96%E7%9A%84JSON%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/"/>
    <id>http://yoursite.com/2015/09/24/替换服务器获取的JSON数据中的换行符/</id>
    <published>2015-09-24T13:51:30.000Z</published>
    <updated>2016-08-06T01:15:20.641Z</updated>
    
    <content type="html"><![CDATA[<p>JSON是不能解析带有换行符字符串的，今天被这傻问题碰到了，服务器获取的json字符串数据有换行符，怎么转json都是null。。。</p>
<p>而且有些不能直接用stringByReplacingOccurrencesOfString就能替换。还是用NSScanner好用<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">+(NSString *)ReplacingNewLineAndWhitespaceCharactersFromJson:(NSString *)dataStr&#123;</div><div class="line">    NSScanner *scanner = [[NSScanner alloc] initWithString:dataStr];</div><div class="line">    [scanner setCharactersToBeSkipped:nil];</div><div class="line">    NSMutableString *result = [[NSMutableString alloc] init];</div><div class="line">    </div><div class="line">    NSString *temp;</div><div class="line">    NSCharacterSet*newLineAndWhitespaceCharacters = [ NSCharacterSet newlineCharacterSet];</div><div class="line">    // 扫描</div><div class="line">    while (![scanner isAtEnd])</div><div class="line">    &#123;</div><div class="line">        temp = nil;</div><div class="line">        [scanner scanUpToCharactersFromSet:newLineAndWhitespaceCharacters intoString:&amp;temp];</div><div class="line">        if (temp) [result appendString:temp];</div><div class="line">        </div><div class="line">        // 替换换行符</div><div class="line">        if ([scanner scanCharactersFromSet:newLineAndWhitespaceCharacters intoString:NULL]) &#123;</div><div class="line">            if (result.length &gt; 0 &amp;&amp; ![scanner isAtEnd]) // Dont append space to beginning or end of result</div><div class="line">                [result appendString:@&quot;|&quot;];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSON是不能解析带有换行符字符串的，今天被这傻问题碰到了，服务器获取的json字符串数据有换行符，怎么转json都是null。。。&lt;/p&gt;
&lt;p&gt;而且有些不能直接用stringByReplacingOccurrencesOfString就能替换。还是用NSScanner好用&lt;br&gt;
    
    </summary>
    
      <category term="MacOS" scheme="http://yoursite.com/categories/MacOS/"/>
    
    
      <category term="MacOS" scheme="http://yoursite.com/tags/MacOS/"/>
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>联想 G500安装黑苹果 所需工具分享</title>
    <link href="http://yoursite.com/2014/10/22/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    <id>http://yoursite.com/2014/10/22/黑苹果/</id>
    <published>2014-10-22T06:51:30.000Z</published>
    <updated>2016-08-06T00:56:47.408Z</updated>
    
    <content type="html"><![CDATA[<p>发帖分享我的联想G500安装黑苹果的工具，寻求一样用G500的小伙伴，探讨完善G500的黑苹果使用，现在我的黑苹果安装完成，安装教材就不具体了，使用变色龙+懒人版10.9的cdr安装成功的，<a id="more"></a>网卡，显卡驱动在附件里面，无线网卡bcm4313都说误解，最后测试使用小米wifi解决了无线上网问题。网上推荐的其他比如nw336，水星150us,150um为测试，可以表示的小米wifi在<br>mac 10.9.5上运行正常，100%可用。<br>      希望大家热烈讨论交流。。。。<br>      驱动连接分享：<br>      <a href="http://pan.baidu.com/s/1hs2mffI" target="_blank" rel="external">xiaomiwif_USB</a><br>      有线网卡等没有备份，上传<a href="http://bbs.pcbeta.com/viewthread-1552651-1-1.html" target="_blank" rel="external">远景</a>啦</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发帖分享我的联想G500安装黑苹果的工具，寻求一样用G500的小伙伴，探讨完善G500的黑苹果使用，现在我的黑苹果安装完成，安装教材就不具体了，使用变色龙+懒人版10.9的cdr安装成功的，
    
    </summary>
    
      <category term="MacOS" scheme="http://yoursite.com/categories/MacOS/"/>
    
    
      <category term="黑苹果" scheme="http://yoursite.com/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
      <category term="MacOS" scheme="http://yoursite.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="http://yoursite.com/2013/04/01/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2013/04/01/hexo常用命令/</id>
    <published>2013-03-31T16:00:00.000Z</published>
    <updated>2016-08-06T01:31:10.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p>Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。</p>
<p>而架设Hexo的环境更简单了 不需要lnmp/lamp这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务</p>
<p>比如[Hexo的官方网站] (<a href="http://hexo.io" target="_blank" rel="external">http://hexo.io</a>) 就是托管于github的pages服务上</p>
<p>我的hexo是3.2.2版本，hexo不同的版本，很多配置都不一样</p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>安装Node（必须） <a id="more"></a></p>
<p>作用：用来生成静态页面的</p>
<p>到Node.js官网下载相应平台的最新版本，一路安装即可。</p>
<p>安装Git（必须）</p>
<p>作用：把本地的hexo内容提交到github上去.</p>
<p>安装Xcode就自带有Git，我就不多说了。</p>
<p>申请GitHub（必须）</p>
<p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。</p>
<p>github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。</p>
<p>正式安装Hexo<br>Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。</p>
<p>执行如下命令安装Hexo：</p>
<p>sudo npm install -g hexo</p>
<p>初始化然后，执行init命令初始化hexo,命令：</p>
<p>hexo init</p>
<p>好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。</p>
<p>生成静态页面</p>
<p>hexo generate（hexo g也可以）</p>
<p>本地启动</p>
<p>启动本地服务，进行文章预览调试，命令：</p>
<p>hexo server</p>
<p>浏览器输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
<h3 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h3><p>建立Repository<br>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法然后建立关联，我的blog在本地/Users/takamashiro/blog，blog是我之前建的东西也全在这里面，有：<br>  _config.yml    node_modules    public      source<br>  db.json        package.json    scaffolds  themes</p>
<h3 id="一些常用命令"><a href="#一些常用命令" class="headerlink" title="一些常用命令"></a>一些常用命令</h3><p>hexo new”postName” #新建文章</p>
<p>hexo new page”pageName” #新建页面</p>
<p>hexo generate #生成静态页面至public目录</p>
<p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>
<p>hexo deploy #将.deploy目录部署到GitHub</p>
<p>hexo help # 查看帮助</p>
<p>hexo version #查看Hexo的版本</p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>hexo s后，输入<a href="http://0.0.0.0:4000，正常情况下应该是最原始的画面，但是我看到的" target="_blank" rel="external">http://0.0.0.0:4000，正常情况下应该是最原始的画面，但是我看到的</a> ‘cannot Get ..’<br>可能原因：由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：<br>npm install hexo-renderer-ejs –save<br>npm install hexo-renderer-stylus –save<br>npm install hexo-renderer-marked –save<br>这个时候再重新生成静态文件，命令：<br>hexo generate（或hexo g）<br>启动本地服务器：<br>hexo server（或hexo s）<br>再，点击网址<a href="http://0.0.0.0:4000OK终于可以看到属于你自己的blog啦" target="_blank" rel="external">http://0.0.0.0:4000OK终于可以看到属于你自己的blog啦</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>参考<br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo.io文档</a><br><a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">window下配置SSH连接GitHub、GitHub配置ssh key</a><br><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">Themems</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h1&gt;&lt;p&gt;Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。&lt;/p&gt;
&lt;p&gt;而架设Hexo的环境更简单了 不需要lnmp/lamp这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务&lt;/p&gt;
&lt;p&gt;比如[Hexo的官方网站] (&lt;a href=&quot;http://hexo.io&quot;&gt;http://hexo.io&lt;/a&gt;) 就是托管于github的pages服务上&lt;/p&gt;
&lt;p&gt;我的hexo是3.2.2版本，hexo不同的版本，很多配置都不一样&lt;/p&gt;
&lt;h3 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h3&gt;&lt;p&gt;安装Node（必须）
    
    </summary>
    
      <category term="建站" scheme="http://yoursite.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="建站" scheme="http://yoursite.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2013/03/15/HelloWorld/"/>
    <id>http://yoursite.com/2013/03/15/HelloWorld/</id>
    <published>2013-03-14T16:00:00.000Z</published>
    <updated>2016-08-06T01:53:31.183Z</updated>
    
    <content type="html"><![CDATA[<p>很早就想有自己的博客，记录自己的生活.<br>需要完成清单列表：<a id="more"></a></p>
<ul>
<li>购买域名、空间等</li>
<li>优化访问</li>
<li>接下来将慢慢把其他处的博客整理，归类尽量。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早就想有自己的博客，记录自己的生活.&lt;br&gt;需要完成清单列表：
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
